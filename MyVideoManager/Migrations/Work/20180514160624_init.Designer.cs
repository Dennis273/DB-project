// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MyVideoManager.Models;
using System;

namespace MyVideoManager.Migrations.Work
{
    [DbContext(typeof(WorkContext))]
    [Migration("20180514160624_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyVideoManager.Models.Catagory", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdministratorId");

                    b.HasKey("Name");

                    b.HasIndex("AdministratorId");

                    b.ToTable("Catagory");
                });

            modelBuilder.Entity("MyVideoManager.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MyVideoManager.Models.UserWork", b =>
                {
                    b.Property<long>("UserWorkId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFavorite");

                    b.Property<int?>("Ranking");

                    b.Property<string>("UserId");

                    b.Property<int>("Watched");

                    b.Property<long>("WorkId");

                    b.HasKey("UserWorkId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkId");

                    b.ToTable("UserWork");
                });

            modelBuilder.Entity("MyVideoManager.Models.Work", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Episode");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("MyVideoManager.Models.Catagory", b =>
                {
                    b.HasOne("MyVideoManager.Models.User", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId");
                });

            modelBuilder.Entity("MyVideoManager.Models.UserWork", b =>
                {
                    b.HasOne("MyVideoManager.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MyVideoManager.Models.Work", "Work")
                        .WithMany("Favs")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyVideoManager.Models.Work", b =>
                {
                    b.HasOne("MyVideoManager.Models.Catagory", "Catagory")
                        .WithMany()
                        .HasForeignKey("Name");
                });
#pragma warning restore 612, 618
        }
    }
}
